package smarttimetable;

import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author crazy
 */
public class WorkHoursInput extends javax.swing.JFrame {

    private final Menu menu;

    /**
     * Creates new form SleepInput
     *
     * @param menu
     */
    public WorkHoursInput(Menu menu) {
        initComponents();

        this.menu = menu;

        //Centers the frame to the centre of the monitor
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        //Displays the user logged in
        userLabel.setText("Logged in as: " + User.getUsername());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workTimePanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        continueButton = new javax.swing.JButton();
        descriptionText = new javax.swing.JLabel();
        fromHourDropdown = new javax.swing.JComboBox<>();
        fromMinuteDropdown = new javax.swing.JComboBox<>();
        untilLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        untilHourDropdown = new javax.swing.JComboBox<>();
        untilMinuteDropdown = new javax.swing.JComboBox<>();
        fromColonLabel = new javax.swing.JLabel();
        untilColonLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        workTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Work Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Stop generating a timetable and return to the main menu.");
        cancelButton.setMaximumSize(new java.awt.Dimension(84, 26));
        cancelButton.setMinimumSize(new java.awt.Dimension(84, 26));
        cancelButton.setPreferredSize(new java.awt.Dimension(84, 26));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        userLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        continueButton.setText("Continue");
        continueButton.setToolTipText("Generate timetables with the given constraints.");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        descriptionText.setText("Enter the range of time to plot tasks within:");

        fromHourDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        fromHourDropdown.setToolTipText("Select the time you would like to start working at.");

        fromMinuteDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "30" }));
        fromMinuteDropdown.setToolTipText("Select the time you would like to start working at.");

        untilLabel.setText("Until:");

        fromLabel.setText("From:");

        untilHourDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        untilHourDropdown.setToolTipText("Select the time you would like to stop working at.");

        untilMinuteDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "30" }));
        untilMinuteDropdown.setToolTipText("Select the time you would like to stop working at.");

        fromColonLabel.setText(":");

        untilColonLabel.setText(":");

        javax.swing.GroupLayout workTimePanelLayout = new javax.swing.GroupLayout(workTimePanel);
        workTimePanel.setLayout(workTimePanelLayout);
        workTimePanelLayout.setHorizontalGroup(
            workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workTimePanelLayout.createSequentialGroup()
                        .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionText)
                            .addGroup(workTimePanelLayout.createSequentialGroup()
                                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fromLabel)
                                    .addComponent(untilLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fromHourDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(untilHourDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(workTimePanelLayout.createSequentialGroup()
                                        .addComponent(untilColonLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(untilMinuteDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(workTimePanelLayout.createSequentialGroup()
                                        .addComponent(fromColonLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fromMinuteDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 100, Short.MAX_VALUE))
                    .addGroup(workTimePanelLayout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        workTimePanelLayout.setVerticalGroup(
            workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromHourDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromMinuteDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromLabel)
                    .addComponent(fromColonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(untilHourDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(untilMinuteDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(untilLabel)
                    .addComponent(untilColonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(continueButton)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Gets the time the user goes to sleep(index 0) and the time the user gets
     * up (index 1) in the form of slot times (0-47 for each half hour) and then
     * generates a new timetable
     *
     * @param evt
     */
    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        int workStart = (Integer.parseInt((String) this.fromHourDropdown.getSelectedItem())) * 2;
        if (this.fromMinuteDropdown.getSelectedItem().equals("30")) {
            workStart++;
        }
        int workEnd = (Integer.parseInt((String) this.untilHourDropdown.getSelectedItem())) * 2;
        if (this.untilMinuteDropdown.getSelectedItem().equals("30")) {
            workEnd++;
        }

        //Checks to see that the start time preceeds end time and then creates a set of timetables in those time constraints
        if (workStart < workEnd) {
            this.setVisible(false);
            new GenerateTimetable(workEnd, workStart);
            menu.setVisible(true);
            this.dispose();
        } else {
            new Popup("Error: The start time is equal to or after the end time.").setVisible(true);
        }
    }//GEN-LAST:event_continueButtonActionPerformed

    /**
     * Returns the user to the menu
     *
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        menu.setVisible(true);
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JLabel descriptionText;
    private javax.swing.JLabel fromColonLabel;
    private javax.swing.JComboBox<String> fromHourDropdown;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JComboBox<String> fromMinuteDropdown;
    private javax.swing.JLabel untilColonLabel;
    private javax.swing.JComboBox<String> untilHourDropdown;
    private javax.swing.JLabel untilLabel;
    private javax.swing.JComboBox<String> untilMinuteDropdown;
    private javax.swing.JLabel userLabel;
    private javax.swing.JPanel workTimePanel;
    // End of variables declaration//GEN-END:variables
}
