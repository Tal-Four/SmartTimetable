/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smarttimetable;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Adam-PC
 */
public class Timetable extends javax.swing.JFrame {

    private final LinkedList timetableIDList = new LinkedList();

    /**
     * Creates new form Timetable
     */
    public Timetable() {
        initComponents();

        //Centers the frame to the centre of the monitor
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.setMaximumSize(dim);

        //Displays the user logged in
        userLabel.setText("Logged in as: " + User.getUsername());

        this.completeHoursButton.setEnabled(false);
        this.changeButton.setEnabled(false);

        updateList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentOrArchivedGroup = new javax.swing.ButtonGroup();
        timetablePanel = new javax.swing.JPanel();
        timetableScrollPanel = new javax.swing.JScrollPane();
        timetableTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        detailsPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        categoryStartTimeLabel = new javax.swing.JLabel();
        dateSetEndTimeLabel = new javax.swing.JLabel();
        dateDueEventTypeLabel = new javax.swing.JLabel();
        timeAlottedLabel = new javax.swing.JLabel();
        timeUsedLabel = new javax.swing.JLabel();
        nameContentsLabel = new javax.swing.JLabel();
        categoryStartTimeContentsLabel = new javax.swing.JLabel();
        dateSetEndTimeContentsLabel = new javax.swing.JLabel();
        dateDueEventTypeContentsLabel = new javax.swing.JLabel();
        timeAlottedContentsLabel = new javax.swing.JLabel();
        timeUsedContentsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        descriptionLabel = new javax.swing.JLabel();
        selectTimetablePanel = new javax.swing.JPanel();
        timetableListScrollPanel = new javax.swing.JScrollPane();
        timetableList = new javax.swing.JList<>();
        ascDescSortButton = new javax.swing.JButton();
        currentRadioButton = new javax.swing.JRadioButton();
        archivedRadioButton = new javax.swing.JRadioButton();
        changeButton = new javax.swing.JButton();
        completeHoursButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        timetablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Timetable", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        timetableTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        timetableTable.setModel(new CustomTableModel());
        timetableTable.setToolTipText("Select a cell to display the details of that task or event on the right.");
        timetableTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        timetableTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        timetableTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        timetableTable.getTableHeader().setReorderingAllowed(false);
        timetableTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        timetableTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        timetableTable.setColumnSelectionAllowed(true);
        timetableTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                timetableTableValueChanged(evt);
            }
        });
        timetableTable.getColumnModel().getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                timetableTableValueChanged(evt);
            }
        });
        timetableScrollPanel.setViewportView(timetableTable);

        backButton.setText("Back");
        backButton.setToolTipText("Returns to the main menu.");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        userLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        exitButton.setText("Exit");
        exitButton.setToolTipText("Closes the program.");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Name:");

        categoryStartTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        categoryStartTimeLabel.setText("Category:");

        dateSetEndTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateSetEndTimeLabel.setText("Date Set:");

        dateDueEventTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateDueEventTypeLabel.setText("Date Due:");

        timeAlottedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeAlottedLabel.setText("Time Alotted:");

        timeUsedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeUsedLabel.setText("Time Used:");

        nameContentsLabel.setToolTipText("The name of the event or task.");

        categoryStartTimeContentsLabel.setToolTipText("The category of the task.");

        dateSetEndTimeContentsLabel.setToolTipText("The date the task was set.");

        dateDueEventTypeContentsLabel.setToolTipText("The date the task is due.");

        timeAlottedContentsLabel.setToolTipText("The time allocated to the task by the program.");

        timeUsedContentsLabel.setToolTipText("The time marked as complete for the task.");

        descriptionText.setEditable(false);
        descriptionText.setColumns(20);
        descriptionText.setLineWrap(true);
        descriptionText.setRows(5);
        descriptionText.setToolTipText("The description of the task or event.");
        descriptionText.setWrapStyleWord(true);
        jScrollPane2.setViewportView(descriptionText);

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descriptionLabel.setText("Description:");

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(timeAlottedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descriptionLabel)
                            .addComponent(dateSetEndTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(categoryStartTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateDueEventTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timeUsedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeUsedContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timeAlottedContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateDueEventTypeContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateSetEndTimeContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(categoryStartTimeContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel)
                    .addComponent(nameContentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryStartTimeLabel)
                    .addComponent(categoryStartTimeContentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateSetEndTimeLabel)
                    .addComponent(dateSetEndTimeContentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateDueEventTypeLabel)
                    .addComponent(dateDueEventTypeContentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeAlottedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeAlottedContentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeUsedLabel)
                    .addComponent(timeUsedContentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectTimetablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Timetable"));

        timetableList.setToolTipText("Select a timetable to load it into the table.");
        timetableList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                timetableListValueChanged(evt);
            }
        });
        timetableListScrollPanel.setViewportView(timetableList);

        ascDescSortButton.setText("Ascending");
        ascDescSortButton.setToolTipText("Defines the order the list of timetable are displayed in.");
        ascDescSortButton.setMaximumSize(new java.awt.Dimension(101, 26));
        ascDescSortButton.setMinimumSize(new java.awt.Dimension(101, 26));
        ascDescSortButton.setPreferredSize(new java.awt.Dimension(101, 26));
        ascDescSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascDescSortButtonActionPerformed(evt);
            }
        });

        currentOrArchivedGroup.add(currentRadioButton);
        currentRadioButton.setSelected(true);
        currentRadioButton.setText("Current");
        currentRadioButton.setToolTipText("Loads latest generated timetables.");
        currentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioButtonActionPerformed(evt);
            }
        });

        currentOrArchivedGroup.add(archivedRadioButton);
        archivedRadioButton.setText("Archived");
        archivedRadioButton.setToolTipText("Loads any old timetables.");
        archivedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archivedRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectTimetablePanelLayout = new javax.swing.GroupLayout(selectTimetablePanel);
        selectTimetablePanel.setLayout(selectTimetablePanelLayout);
        selectTimetablePanelLayout.setHorizontalGroup(
            selectTimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timetableListScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(selectTimetablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(archivedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ascDescSortButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        selectTimetablePanelLayout.setVerticalGroup(
            selectTimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectTimetablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectTimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ascDescSortButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(selectTimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentRadioButton)
                        .addComponent(archivedRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timetableListScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        changeButton.setText("Change");
        changeButton.setToolTipText("Change the contents of the selected slot.");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        completeHoursButton.setText("Complete Hours");
        completeHoursButton.setToolTipText("Complete hours for a task in the selected slot.");
        completeHoursButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeHoursButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout timetablePanelLayout = new javax.swing.GroupLayout(timetablePanel);
        timetablePanel.setLayout(timetablePanelLayout);
        timetablePanelLayout.setHorizontalGroup(
            timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timetablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(timetablePanelLayout.createSequentialGroup()
                        .addComponent(timetableScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectTimetablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(timetablePanelLayout.createSequentialGroup()
                                .addComponent(changeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(completeHoursButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timetablePanelLayout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        timetablePanelLayout.setVerticalGroup(
            timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timetablePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(timetablePanelLayout.createSequentialGroup()
                        .addComponent(selectTimetablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(completeHoursButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(timetableScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(timetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exitButton)
                        .addComponent(backButton))
                    .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timetablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timetablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timetableTableValueChanged(javax.swing.event.ListSelectionEvent evt) {
        int selectedColumn = timetableTable.getSelectedColumn();
        int selectedRow = timetableTable.getSelectedRow();
        int timetableID = timetableIDList.getDataAt(timetableList.getSelectedIndex());

        if (selectedColumn == 0 || this.timetableList.isSelectionEmpty()) {
            this.changeButton.setEnabled(false);
            this.completeHoursButton.setEnabled(false);
        } else {
            this.changeButton.setEnabled(true);
        }

        this.nameContentsLabel.setText("");
        this.categoryStartTimeContentsLabel.setText("");
        this.dateSetEndTimeContentsLabel.setText("");
        this.dateDueEventTypeContentsLabel.setText("");
        this.timeAlottedContentsLabel.setText("");
        this.timeUsedContentsLabel.setText("");
        this.descriptionText.setText("");

        if (selectedColumn >= 0 && selectedColumn <= 7 && selectedRow >= 0 && selectedRow < 48) {
            if (this.timetableTable.getModel().getValueAt(selectedRow, selectedColumn) != null) {

                Object[] cellIDAndEventCheck = this.getCellIDAndCheckEvent();

                boolean event = (boolean) cellIDAndEventCheck[1];
                int taskeventID = (int) cellIDAndEventCheck[0];

                if (event) {

                    this.completeHoursButton.setEnabled(false);

                    this.categoryStartTimeLabel.setText("Start Time:");
                    this.categoryStartTimeContentsLabel.setToolTipText("The time the event starts at.");
                    this.dateSetEndTimeLabel.setText("End Time:");
                    this.dateSetEndTimeLabel.setToolTipText("The time the event ends at.");
                    this.dateDueEventTypeLabel.setText("Event Type:");
                    this.dateDueEventTypeLabel.setToolTipText("Whether the event is a one-off event or reccuring.");
                    this.timeAlottedLabel.setText(" ");
                    this.timeAlottedLabel.setToolTipText("");
                    this.timeUsedLabel.setText(" ");
                    this.timeUsedLabel.setToolTipText("");

                    String sql = "SELECT event.EventName, event.StartTime, event.EndTime, event.Description, event.Day\n"
                            + "FROM ((timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) INNER JOIN timetable ON (timetableslot.TimetableID = timetable.TimetableID) AND (user.UserID = timetable.UserID) AND (timetableslot.UserID = timetable.UserID)) INNER JOIN event ON (event.UserID = timetableslot.UserID) AND (event.EventID = timetableslot.EventID) AND (user.UserID = event.UserID)\n"
                            + "WHERE (((timetableslot.Day)=" + selectedColumn + ") AND ((timetableslot.Time)=" + selectedRow + ") AND ((timetable.TimetableID)=" + timetableID + ") AND ((user.UserID)=" + User.getUserID() + "));";

                    ResultSet rs = DatabaseHandle.query(sql);
                    try {
                        if (rs.next()) {

                            nameContentsLabel.setText(rs.getString("event.EventName"));

                            float startTime = rs.getFloat("event.StartTime");
                            if ((startTime * 2) % 2 == 0) {
                                categoryStartTimeContentsLabel.setText((int) startTime + ":00");
                            } else {
                                categoryStartTimeContentsLabel.setText((int) startTime + ":30");
                            }

                            float endTime = (float) (rs.getFloat("event.EndTime") + 0.5);
                            if ((endTime * 2) % 2 == 0) {
                                dateSetEndTimeContentsLabel.setText((int) endTime + ":00");
                            } else {
                                dateSetEndTimeContentsLabel.setText((int) endTime + ":30");
                            }

                            descriptionText.setText(rs.getString("event.Description"));

                            if (rs.getInt("Day") != 0) {
                                dateDueEventTypeContentsLabel.setText("Weekly Event");
                            } else {
                                dateDueEventTypeContentsLabel.setText("Single Event");
                            }
                        }
                    } catch (SQLException e) {
                        System.err.println(e);
                    }
                    DatabaseHandle.disconnect();

                } else if (taskeventID != 0) {
                    this.completeHoursButton.setEnabled(true);

                    this.categoryStartTimeLabel.setText("Category:");
                    this.categoryStartTimeLabel.setToolTipText("The category of the selected task.");
                    this.dateSetEndTimeLabel.setText("Date Set:");
                    this.dateSetEndTimeLabel.setToolTipText("The date the task was set on.");
                    this.dateDueEventTypeLabel.setText("Date Due:");
                    this.dateDueEventTypeLabel.setToolTipText("The date the task is due in for.");
                    this.timeAlottedLabel.setText("Time Alloted:");
                    this.timeAlottedLabel.setToolTipText("The time allocated to the task by the program.");
                    this.timeUsedLabel.setText("Time Used:");
                    this.timeUsedLabel.setToolTipText("The time marked as complete for the selected task.");

                    String sql = "SELECT task.TaskID\n"
                            + "FROM timetable INNER JOIN (task INNER JOIN (timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) ON (timetableslot.TaskID = task.TaskID) AND (task.UserID = timetableslot.UserID) AND (task.UserID = user.UserID)) ON (timetableslot.UserID = timetable.UserID) AND (timetable.TimetableID = timetableslot.TimetableID) AND (timetable.UserID = user.UserID)\n"
                            + "WHERE (((timetableslot.Day)=" + selectedColumn + ") AND ((timetableslot.Time)=" + selectedRow + ") AND ((timetable.TimetableID)=" + timetableID + ") AND ((user.UserID)=" + User.getUserID() + "));";

                    ResultSet rs = DatabaseHandle.query(sql);

                    try {
                        if (rs.next()) {
                            Task task = new Task(rs.getInt("task.TaskID"));
                            nameContentsLabel.setText(task.getName());
                            descriptionText.setText(task.getDescription());
                            timeUsedContentsLabel.setText("" + task.getTimeUsed());
                            timeAlottedContentsLabel.setText("" + task.getTimeModified());
                            dateDueEventTypeContentsLabel.setText(task.sqlDateToTextFormat(task.getDateDue()));
                            dateSetEndTimeContentsLabel.setText(task.sqlDateToTextFormat(task.getDateSet()));
                            categoryStartTimeContentsLabel.setText(task.getCategory().getName());
                        }
                    } catch (SQLException e) {
                        System.err.println(e);
                    }
                    DatabaseHandle.disconnect();
                }
            }
        }
    }

    private void updateList() {
        this.timetableList.setModel(new DefaultListModel<>());
        String sort = "";
        if (ascDescSortButton.getText().equals("Descending")) {
            sort = " DESC";
        }
        String sql = "SELECT timetable.TimetableID, timetable.StartDay\n"
                + "FROM user INNER JOIN timetable ON user.UserID = timetable.UserID\n"
                + "WHERE (((user.UserID)=" + User.getUserID() + ") AND ((timetable.Hidden)=" + archivedRadioButton.isSelected() + "))\n"
                + "ORDER BY timetable.StartDay" + sort + ";";
        ResultSet rs = DatabaseHandle.query(sql);
        this.timetableIDList.clear();
        DefaultListModel dlm = new DefaultListModel();

        try {
            while (rs.next()) {
                this.timetableIDList.addNode(rs.getInt("TimetableID"));
                String date = rs.getDate("StartDay").toString();
                dlm.addElement(sqlDateToText(date));
            }
            this.timetableList.setModel(dlm);
        } catch (SQLException e) {
            System.err.println(e);
        }
        DatabaseHandle.disconnect();
    }

    private String sqlDateToText(String sqlDate) {
        return (sqlDate.substring(8, 10) + "/" + sqlDate.substring(5, 7) + "/" + sqlDate.substring(0, 4));
    }

    public void reloadTimetable() {
        int timetableID = this.timetableIDList.getDataAt(this.timetableList.getSelectedIndex());
        loadTimetable(timetableID);
    }

    private void loadTimetable(int timetableID) {

        ((CustomTableModel) timetableTable.getModel()).clear();
        timetableTable.getColumnModel().getColumn(0).setPreferredWidth(35);

        String sql = "SELECT event.EventName, timetableslot.Day, timetableslot.Time\n"
                + "FROM ((timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) INNER JOIN timetable ON (timetable.UserID = user.UserID) AND (timetableslot.TimetableID = timetable.TimetableID) AND (timetableslot.UserID = timetable.UserID)) INNER JOIN event ON (event.UserID = user.UserID) AND (timetableslot.EventID = event.EventID) AND (timetableslot.UserID = event.UserID)\n"
                + "WHERE (((user.UserID)=" + User.getUserID() + ") AND ((timetable.TimetableID)=" + timetableID + "));";

        ResultSet rs = DatabaseHandle.query(sql);

        try {
            while (rs.next()) {
                timetableTable.getModel().setValueAt(rs.getString("event.EventName"), rs.getInt("timetableslot.Time"), rs.getInt("timetableslot.Day"));
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
        DatabaseHandle.disconnect();

        sql = "SELECT task.Name, timetableslot.Day, timetableslot.Time\n"
                + "FROM task INNER JOIN ((timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) INNER JOIN timetable ON (timetableslot.TimetableID = timetable.TimetableID) AND (timetable.UserID = user.UserID) AND (timetableslot.UserID = timetable.UserID)) ON (task.UserID = timetableslot.UserID) AND (task.TaskID = timetableslot.TaskID) AND (task.UserID = user.UserID)\n"
                + "WHERE (((user.UserID)=" + User.getUserID() + ") AND ((timetable.TimetableID)=" + timetableID + "));";

        rs = DatabaseHandle.query(sql);

        try {
            while (rs.next()) {
                timetableTable.getModel().setValueAt(rs.getString("task.Name"), rs.getInt("timetableslot.Time"), rs.getInt("timetableslot.Day"));
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
        DatabaseHandle.disconnect();

        render();

    }

    private Object[] getCellIDAndCheckEvent() {
        int selectedColumn = timetableTable.getSelectedColumn();
        int selectedRow = timetableTable.getSelectedRow();
        int timetableID = timetableIDList.getDataAt(timetableList.getSelectedIndex());
        boolean event = false;
        int taskEventID = 0;

        String sql = "SELECT event.EventID\n"
                + "FROM event INNER JOIN ((timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) INNER JOIN timetable ON (timetableslot.TimetableID = timetable.TimetableID) AND (user.UserID = timetable.UserID) AND (timetableslot.UserID = timetable.UserID)) ON (event.UserID = timetableslot.UserID) AND (event.EventID = timetableslot.EventID) AND (event.UserID = user.UserID)\n"
                + "WHERE (((timetableslot.Day)=" + selectedColumn + ") AND ((timetableslot.Time)=" + selectedRow + ") AND ((timetable.TimetableID)=" + timetableID + ") AND ((user.UserID)=" + User.getUserID() + ") AND ((timetableslot.TaskID) Is Null));";
        ResultSet rs = DatabaseHandle.query(sql);

        try {
            if (rs.next()) {
                event = true;
                taskEventID = rs.getInt("event.EventID");
            } else {
                sql = "SELECT task.TaskID\n"
                        + "FROM task INNER JOIN ((timetableslot INNER JOIN user ON timetableslot.UserID = user.UserID) INNER JOIN timetable ON (timetableslot.TimetableID = timetable.TimetableID) AND (user.UserID = timetable.UserID) AND (timetableslot.UserID = timetable.UserID)) ON (task.UserID = user.UserID) AND (task.TaskID = timetableslot.TaskID) AND (task.UserID = timetableslot.UserID)\n"
                        + "WHERE (((timetableslot.Day)=" + selectedColumn + ") AND ((timetableslot.Time)=" + selectedRow + ") AND ((timetable.TimetableID)=" + timetableID + ") AND ((user.UserID)=" + User.getUserID() + ") AND ((timetableslot.EventID) Is Null));";
                rs = DatabaseHandle.query(sql);

                if (rs.next()) {
                    event = false;
                    taskEventID = rs.getInt("task.TaskID");
                }
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
        DatabaseHandle.disconnect();

        return new Object[]{taskEventID, event};
    }

    private void render() {
        timetableTable.setDefaultRenderer(Object.class, new CustomRenderer(timetableIDList.getDataAt(timetableList.getSelectedIndex())));
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        //Logs out user and returns to login screen
        this.setVisible(false);
        new Menu().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        //Stops the program
        User.logoutUser();
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void timetableListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_timetableListValueChanged
        loadTimetable(timetableIDList.getDataAt(timetableList.getSelectedIndex()));
    }//GEN-LAST:event_timetableListValueChanged

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        int selectedColumn = this.timetableTable.getSelectedColumn();
        if (selectedColumn > 0) {
            int selectedRow = this.timetableTable.getSelectedRow();
            Object temp = this.timetableTable.getValueAt(selectedRow, selectedColumn);
            String previousContents = "";
            if (temp != null) {
                previousContents = temp.toString();
            }
            int timetableID = this.timetableIDList.getDataAt(this.timetableList.getSelectedIndex());

            new ChangeSlot(this, previousContents, selectedColumn, selectedRow, timetableID).setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    private void completeHoursButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeHoursButtonActionPerformed
        Object[] options = {"Mark As Complete", "Complete Hours", "Cancel"};
        int result = JOptionPane.showOptionDialog(this, "Mark as complete to finish the task.\nComplete hours to add how much time you've completed.", "Task Completion", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        int taskID = (int) this.getCellIDAndCheckEvent()[0];
        Task task = new Task(taskID);
        if (result == 1) {
            new CompleteHours(this, task).setVisible(true);
            this.setVisible(false);
        } else if (result == 0) {
            task.complete();
            this.reloadTimetable();
        }
    }//GEN-LAST:event_completeHoursButtonActionPerformed

    private void currentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioButtonActionPerformed
        updateList();
    }//GEN-LAST:event_currentRadioButtonActionPerformed

    private void archivedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archivedRadioButtonActionPerformed
        updateList();
    }//GEN-LAST:event_archivedRadioButtonActionPerformed

    private void ascDescSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascDescSortButtonActionPerformed
        if (ascDescSortButton.getText().equals("Ascending")) {
            ascDescSortButton.setText("Descending");
        } else {
            ascDescSortButton.setText("Ascending");
        }
        this.updateList();
    }//GEN-LAST:event_ascDescSortButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton archivedRadioButton;
    private javax.swing.JButton ascDescSortButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel categoryStartTimeContentsLabel;
    private javax.swing.JLabel categoryStartTimeLabel;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton completeHoursButton;
    private javax.swing.ButtonGroup currentOrArchivedGroup;
    private javax.swing.JRadioButton currentRadioButton;
    private javax.swing.JLabel dateDueEventTypeContentsLabel;
    private javax.swing.JLabel dateDueEventTypeLabel;
    private javax.swing.JLabel dateSetEndTimeContentsLabel;
    private javax.swing.JLabel dateSetEndTimeLabel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameContentsLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPanel selectTimetablePanel;
    private javax.swing.JLabel timeAlottedContentsLabel;
    private javax.swing.JLabel timeAlottedLabel;
    private javax.swing.JLabel timeUsedContentsLabel;
    private javax.swing.JLabel timeUsedLabel;
    private javax.swing.JList<String> timetableList;
    private javax.swing.JScrollPane timetableListScrollPanel;
    private javax.swing.JPanel timetablePanel;
    private javax.swing.JScrollPane timetableScrollPanel;
    private javax.swing.JTable timetableTable;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
